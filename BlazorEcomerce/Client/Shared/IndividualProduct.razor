@using System.Text.Json
@inject IProductService productService
@inject Blazored.LocalStorage.ILocalStorageService localStore

@if (product == null)
{
    <div class="container">
        <div class="loader" style="--b: 20px;--c:#000;width:80px;--n:15;--g:7deg"></div>
    </div>
}
else
{

    <div class="container">
             <div class="card  p-3 bg-white m-3">
                <div class="text">
                    <h2 class="word-wrap">@product.Title</h2>
                </div>
                <div class="middle_container">
                    <div class=image-container>
                    <img src="@product.ImageUrl" alt="@product.Title">
                    </div>
                    <div class="text">
                        <h4 class="word-wrap">@product.Description</h4>

                    </div>
                </div>
            @if (IsinCart)
            {
                <button class="btn bg-success" > Product already in the cart.</button>
            }
            else
            {
                 <button class="button-9" @onclick="UpdateLocalStorage">
                    View Product
                </button>
            }
            </div>


    </div>
    <ShoppingCart />


}


@code {
    private Product product;
    private string message;
    [Parameter]
    public int Id { get; set; }
    const string noteKey = "note";
    public bool IsinCart = false;
    private List<Product> noteContent { get; set; } = new List<Product>();



    public async Task UpdateLocalStorage()
    {        
        try
        {
            noteContent.Add(product);
            IsinCart = true;
            await localStore.SetItemAsync(noteKey, noteContent);
            noteContent = await localStore.GetItemAsync<List<Product>>(noteKey);
            StateHasChanged();
        }
        catch (Exception ex)
        {
        }
    }
    public async Task ClearLocalStorage()
    {
        noteContent = new List<Product>();
        await localStore.ClearAsync();
        StateHasChanged();

    }


    protected override async Task OnInitializedAsync()
    {

    }


    protected override async Task OnParametersSetAsync()
    {
        message = "Loading Product....";



        var result = await productService.GetProductById(Id);
        if (!result.Success)
        {
            message = result.Message;

        }
        else
        {
            product = result.Data;
            var localStorage = await localStore.GetItemAsync<List<Product>>(noteKey);
            if (localStorage != null)
            {
                noteContent = localStorage;
                foreach(var item in localStorage)
                {
                    if (item.Id == product.Id)
                    {
                        IsinCart = true;
                        break;
                    }
                }

            }
            else
            {
                noteContent = new List<Product>();
            }

        }


    }

}
