@inject IProductService ProductService;

@if (IsLoading)
{
    <div class="position-relative min-vh-100 d-flex align-items-center justify-content-center p-3">
        <div class="loader" style="--b: 20px;--c:#000;width:80px;--n:15;--g:7deg"></div>
    </div>
}
else if (IsVacia)
{
    <div class="position-relative min-vh-100 d-flex align-items-center justify-content-center p-3">
        <h1> No hay productos Que mostrar</h1>
    </div>
}
else
{


    <div class="listContainer">
        @foreach (var item in ProductService.Products)
        {

            <div class="card  p-3  m-3 w-350">
                 <div class=image-container>
                    <img src="@item.ImageUrl" alt="@item.Title">
                 </div>
                 <div class="text">
                    <h4 class="word-wrap" >@item.Title</h4>
                 </div>
                <button class="button-9" onclick="@(() => NavigateToProduct(item.Id))">
                    View Product
                </button>

            </div>


        }
    </div>

    <ShoppingCart />

}

@code {
    private Boolean IsLoading = true;
    private Boolean IsVacia = false;

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private string message { get; set; } = "";

    [Parameter]
    public List<Product> CurrentCategory { get; set; } = new List<Product>();

    protected override async Task OnInitializedAsync()
    {

        if (CurrentCategory.Count > 0)
        {
            ProductService.Products = CurrentCategory;
            IsLoading = false;

        }

        if (ProductService.Products.Count == 0 || CurrentCategory.Count==0)
        {

            await ProductService.GetProducts();
            IsLoading = false;

        }
        IsVacia = ProductService.Products.Count == 0;

    }

    private void NavigateToProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }
}
