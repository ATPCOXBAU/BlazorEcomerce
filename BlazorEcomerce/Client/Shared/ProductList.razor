@inject IProductService ProductService;


@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <div class="loader" style="--b: 20px;--c:#000;width:80px;--n:15;--g:7deg"> as</div>
}
else
{


    <div class="listContainer">

        @foreach (var item in ProductService.Products)
        {

            <div class="card  p-3  m-3 w-350">
                 <div class=image-container>
                    <img src="@item.ImageUrl" alt="@item.Title">
                 </div>
                 <div class="text">
                    <h4 class="word-wrap" >@item.Title</h4>
                 </div>
                <button class="button-9" onclick="@(() => NavigateToProduct(item.Id))">
                    View Product
                </button>

            </div>


        }
    </div>
}

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private string message { get; set; } = "";

    [Parameter]
    public List<Product> CurrentCategory { get; set; } = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        message = "Loading Products .........";

        if (CurrentCategory.Count > 0)
        {
            Console.WriteLine("CATEGORIASSS");
            ProductService.Products = CurrentCategory;

        }
        if (ProductService.Products.Count == 0 || CurrentCategory.Count==0)
        {

            await ProductService.GetProducts();
        }

        if (ProductService.Products.Count == 0 )
        {

            message = "No products available";

        }
   

    }

    private void NavigateToProduct(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }
}
