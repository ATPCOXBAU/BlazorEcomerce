@page "/cartview"
@inject Blazored.LocalStorage.ILocalStorageService localStore


<section class="h-100" >
    <div class="container h-100 py-5">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-10">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="fw-normal mb-0 text-black">Shopping Cart</h3>
                </div>
                @if (HasItems)
                {
                    @foreach (var item in noteContent)
                    {


                        <div class="card rounded-3 mb-4">
                            <div class="card-body p-4">
                                <div class="row d-flex justify-content-between align-items-center">
                                    <div class="col-md-2 col-lg-2 col-xl-2">
                                        <img src="@item.ImageUrl"
                                             class="img-fluid rounded-3" alt="Cotton T-shirt">
                                    </div>
                                    <div class="col-md-3 col-lg-3 col-xl-3">
                                        <p class="lead fw-normal mb-2">@item.Title</p>
                                    </div>
                                    <div class="col-md-3 col-lg-3 col-xl-2 d-flex">

                                        <input id="form1" min="0" name="quantity" value="1" type="number"
                                               class="form-control form-control-sm" />


                                    </div>
                                    <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                                        <h5 class="mb-0">$@item.Price</h5>
                                    </div>
                                    <div class="col-md-1 col-lg-1 col-xl-1 text-end">
                                        <a onclick="@(() => DeleteFromCart(item.Id))" class="text-danger"><i class="oi oi-trash"></i></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="card mb-4 rounded-3 ">
                        <div class="card-body p-4 d-flex flex-row">
                            <div class="form-outline flex-fill">
                                <input type="text" id="form1" class="form-control form-control-lg" />
                                <label class="form-label" for="form1">Discound code</label>
                            </div>
                            <button type="button" class="btn btn-outline-warning btn-lg ms-3">Apply</button>
                        </div>
                    </div>

                    <div class="card rounded-3 ">
                        <div class="card-body">
                            <button type="button" class="btn btn-warning btn-block btn-lg">Proceed to Pay</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card rounded-3 mb-4">
                        <div class=" position-relative min-vh-75 d-flex align-items-center justify-content-center p-3">
                            <h5 class="mb-0">You don't have any items in the cart. </h5>
                        </div>
                    </div>
                    
                }


            </div>
        </div>
    </div>

</section>
@code {
    private List<Product> noteContent { get; set; } = new List<Product>();
    protected bool HasItems = false;


    protected async Task DeleteFromCart(int id)
    {
        if (HasItems)
        {
            noteContent.RemoveAll(p => p.Id == id);
            await localStore.SetItemAsync("note", noteContent);
            noteContent = await localStore.GetItemAsync<List<Product>>("note");
            if(noteContent.Count <= 0)
            {
                HasItems = false;
            }
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        noteContent = await localStore.GetItemAsync<List<Product>>("note") ?? new List<Product>();
        if (noteContent.Count > 0)
        {
            HasItems = true;
        }
        else
        {
            HasItems = false;
        }


    }


}
